# -*- coding: utf-8 -*-
"""PandasTest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15JhiLjlF6YoWDeC8YwOuzYbOsflpp1nF
"""

#importation module pandas
import pandas as pd

#Importer le csv dans un DataFrame pandas
#compression de gzip directement et lecture de csv
full_csv = pd.read_csv('https://cadastre.data.gouv.fr/data/etalab-dvf/latest/csv/2020/full.csv.gz', compression='gzip',  header=0, sep=',', quotechar='"')

full_csv.head()

#le type de document
type(full_csv)

#taille de ficheir
full_csv.shape

#ajouter une colonnne contenent vore nom
full_csv.insert(0, 'NOM_CANDIDAT', "BAGHROSSE-Rachid")
#full_csv["NOM_CANDIDAT"]="BAGHROSSE-Rachid"

full_csv['NOM_CANDIDAT']

#Ajouter une colonne portant le nom « adresse_string »
full_csv['code_postal'] = full_csv['code_postal'].apply(str)
pays= 'FRANCE'
full_csv["adresse_string"] = (full_csv['adresse_code_voie'] + ' ' + full_csv['adresse_nom_voie'] + ', ' + full_csv['nom_commune'] + ', ' + full_csv['code_postal'] + ', '+ pays)

print(full_csv.adresse_string)

# la suppression des lignes ayant l'un de ces attributs null
full_csv.dropna(subset=['longitude', 'latitude'])

#trie de resultat par date pour récupérer les plus récents enregistrements
trie=full_csv.sort_values(by='date_mutation')
trie.tail(500)

!pip install requests 
import requests

AIRTABLE_BASE_ID="appqmv1skloVlLyKV"
AIRTABLE_API_KEY="keyXZ6Vj7qiD173Zs"
AIRTABLE_TABLE_NAME="DVF"

endpoint=f'https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}'

 #trie de resultat par date
dataTrie=full_csv.sort_values(by='date_mutation')
data = dataTrie[["NOM_CANDIDAT","id_mutation","date_mutation","numero_disposition","nature_mutation","valeur_fonciere","adresse_numero","adresse_code_voie","code_postal","code_commune","code_departement","nombre_lots","code_type_local","type_local","surface_reelle_bati","nombre_pieces_principales","code_nature_culture","nature_culture","surface_terrain","longitude","latitude","adresse_string"]].tail(3).copy()
parse = json.loads(data.to_json(orient="records"))

#affichage 
"""
print(parse[0]);====> affiche un objet comme la suite
 {'NOM_CANDIDAT': 'BAGHROSSE-Rachid', 'id_mutation': '2020-24880',
 'date_mutation': '2020-06-30', 'numero_disposition': 1, 'nature_mutation': 'Vente',
  'valeur_fonciere': 160000.0, 'adresse_numero': 11.0, 'adresse_code_voie': '2880',
   'code_postal': '10000.0', 'code_commune': 10387, 'code_departement': 10, 'nombre_lots': 1,
    'code_type_local': 3.0, 'type_local': 'Dépendance', 'surface_reelle_bati': None,
     'nombre_pieces_principales': 0.0, 'code_nature_culture': None, 'nature_culture': None,
      'surface_terrain': None, 'longitude': 4.086842, 'latitude': 48.282919,
       'adresse_string': '2880 RUE JEANNETTE, Troyes, 10000.0, FRANCE'}
"""
#ajouter les données sur airtable
#chaque ligne representre un objet avec sous format json avec tous les champs requis
for i in range(len(parse)):

  headers = {
    "Authorization": f"Bearer {AIRTABLE_API_KEY}",
    "Content-Type": "application/json"
                }
  data = {
      "records": [
             {
              "fields":
                parse[i] 
                        }
                    ]
                }
  #API post request               
  r = requests.post(endpoint, json=data, headers=headers)